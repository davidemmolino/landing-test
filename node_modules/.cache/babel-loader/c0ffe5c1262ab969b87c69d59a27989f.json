{"ast":null,"code":"import { atom, selector } from 'recoil'; // export const id = atom({\n//   key: 'id',\n//   default: 1,\n// });\n\nexport const playStart = atom({\n  key: 'playStart',\n  default: false\n}); // TicTacToe Atoms & Selectors\n// Refactor to move selectors to selectors.tsx\n\nexport const boardSize = 3;\nexport const squareStates = Array(boardSize * boardSize).fill(null).map((el, i) => atom({\n  key: `square-${i}`,\n  default: '-'\n}));\nexport const currentPlayerState = atom({\n  key: 'currentPlayerState',\n  default: 'X'\n});\nexport const gameEndSelector = selector({\n  key: 'gameEndSelector',\n  get: ({\n    get\n  }) => {\n    const board = Array(boardSize).fill(null).map((el, i) => {\n      const row = [];\n\n      for (let j = 0; j < boardSize; j++) {\n        row.push(get(squareStates[i * boardSize + j]));\n      }\n\n      return row;\n    });\n    return checkWinState(get(currentPlayerState), board); // return something\n  }\n}); // check win state, call from componentDidUpdate lifecycle\n\nfunction checkWinState(currentPlayer, board) {\n  const checkPlayer = currentPlayer === 'X' ? 'O' : 'X'; // eslint-disable-next-line\n\n  let winBoxes; // check each row\n\n  for (let i = 0; i < board.length; i++) {\n    if (board[i].join('') === checkPlayer.repeat(3)) {\n      winBoxes = [`${i}0`, `${i}1`, `${i}2`];\n      return true;\n    }\n  } // check each column\n\n\n  const columnArray = ['', '', ''];\n\n  for (let i = 0; i < board.length; i++) {\n    // reset win boxes for every column\n    for (let j = 0; j < board[i].length; j++) {\n      // i = number of rows\n      // j = number of columns\n      columnArray[j] += board[i][j];\n    }\n  }\n\n  for (let i = 0; i < columnArray.length; i++) {\n    if (columnArray[i] === checkPlayer.repeat(3)) {\n      winBoxes = [`0${i}`, `1${i}`, `2${i}`];\n      return true;\n    }\n  } // check each diagonal\n  // TODO: make this more dynamic, rather hard coded.\n\n\n  const diagArray = ['', ''];\n  diagArray[0] += board[0][0] + board[1][1] + board[2][2];\n  diagArray[1] += board[0][2] + board[1][1] + board[2][0];\n\n  for (let i = 0; i < diagArray.length; i++) {\n    if (diagArray[i] === checkPlayer.repeat(3)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/davide/Desktop/Recoilize-landing-page/src/Components/Store/Atoms.tsx"],"names":["atom","selector","playStart","key","default","boardSize","squareStates","Array","fill","map","el","i","currentPlayerState","gameEndSelector","get","board","row","j","push","checkWinState","currentPlayer","checkPlayer","winBoxes","length","join","repeat","columnArray","diagArray"],"mappings":"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","sourcesContent":["import {atom, selector} from 'recoil';\n\n// export const id = atom({\n//   key: 'id',\n//   default: 1,\n// });\n\nexport const playStart = atom({\n  key: 'playStart',\n  default: false,\n});\n\n// TicTacToe Atoms & Selectors\n// Refactor to move selectors to selectors.tsx\n\nexport const boardSize = 3;\n\nexport const squareStates = Array(boardSize * boardSize).fill(null).map((el, i) => (\n  atom({\n    key: `square-${i}`,\n    default: '-',\n  })\n))\n\nexport const currentPlayerState = atom({\n  key: 'currentPlayerState',\n  default: 'X',\n})\n\nexport const gameEndSelector = selector({\n  key: 'gameEndSelector',\n  get: ({get}) => {\n\n    const board = Array(boardSize).fill(null).map((el, i) => {\n      const row: string[] = [];\n      for (let j = 0; j < boardSize; j++) {\n        row.push(get(squareStates[(i * boardSize) + j]))\n      }\n      return row;\n    })\n\n    return checkWinState(get(currentPlayerState), board);\n\n    // return something\n  }\n})\n\n// check win state, call from componentDidUpdate lifecycle\nfunction checkWinState(currentPlayer, board) {\n\n  const checkPlayer = currentPlayer === 'X' ? 'O' : 'X';\n  // eslint-disable-next-line\n  let winBoxes;\n\n  // check each row\n  for (let i = 0; i < board.length; i++) {\n    if (board[i].join('') === checkPlayer.repeat(3)) {\n      winBoxes = [`${i}0`, `${i}1`, `${i}2`];\n      return true;\n    }\n  }\n\n  // check each column\n  const columnArray = ['', '', ''];\n  for (let i = 0; i < board.length; i++) {\n    // reset win boxes for every column\n    for (let j = 0; j < board[i].length; j++) {\n      // i = number of rows\n      // j = number of columns\n      columnArray[j] += board[i][j];\n    }\n  }\n\n  for (let i = 0; i < columnArray.length; i++) {\n    if (columnArray[i] === checkPlayer.repeat(3)) {\n      winBoxes = [`0${i}`, `1${i}`, `2${i}`];\n      return true;\n    }\n  }\n\n  // check each diagonal\n  // TODO: make this more dynamic, rather hard coded.\n  const diagArray = ['', ''];\n\n  diagArray[0] += board[0][0] + board[1][1] + board[2][2];\n  diagArray[1] += board[0][2] + board[1][1] + board[2][0];\n\n  for (let i = 0; i < diagArray.length; i++) {\n    if (diagArray[i] === checkPlayer.repeat(3)) {\n      return true;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}