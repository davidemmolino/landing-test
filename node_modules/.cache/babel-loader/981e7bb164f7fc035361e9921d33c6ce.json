{"ast":null,"code":"import \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/es.typed-array.float32-array\";\nimport \"core-js/modules/es.typed-array.float64-array\";\nimport \"core-js/modules/es.typed-array.int8-array\";\nimport \"core-js/modules/es.typed-array.int16-array\";\nimport \"core-js/modules/es.typed-array.int32-array\";\nimport \"core-js/modules/es.typed-array.uint8-array\";\nimport \"core-js/modules/es.typed-array.uint8-clamped-array\";\nimport \"core-js/modules/es.typed-array.uint16-array\";\nimport \"core-js/modules/es.typed-array.uint32-array\";\nimport \"core-js/modules/es.typed-array.from\";\nimport \"core-js/modules/es.typed-array.of\";\nimport \"core-js/modules/web.immediate\";\nimport \"core-js/modules/web.url\";\nimport \"core-js/modules/web.url.to-json\";\nimport \"core-js/modules/web.url-search-params\";\nvar _jsxFileName = \"/home/davide/Desktop/Recoilize-landing-page/src/Components/Playground/TicTacToe.tsx\";\nimport React, { Component } from 'react';\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from 'recoil';\nimport { squareStates, currentPlayerState, gameEndSelector } from '../Store/Atoms';\nconst boardSize = 3;\nexport default class App extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"Tic Tac Toe\"), /*#__PURE__*/React.createElement(Board, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst Board = props => {\n  const gameEndSelectorState = useRecoilValue(gameEndSelector);\n  const rows = Array(boardSize).fill(null).map((el, i) => {\n    return /*#__PURE__*/React.createElement(Row, {\n      key: `row-${i}`,\n      rowIndex: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 12\n      }\n    });\n  });\n  const resetCurrentPlayerState = useResetRecoilState(currentPlayerState);\n  let resetSquare1 = useResetRecoilState(squareStates[0]);\n  let resetSquare2 = useResetRecoilState(squareStates[1]);\n  let resetSquare3 = useResetRecoilState(squareStates[2]);\n  let resetSquare4 = useResetRecoilState(squareStates[3]);\n  let resetSquare5 = useResetRecoilState(squareStates[4]);\n  let resetSquare6 = useResetRecoilState(squareStates[5]);\n  let resetSquare7 = useResetRecoilState(squareStates[6]);\n  let resetSquare8 = useResetRecoilState(squareStates[7]);\n  let resetSquare9 = useResetRecoilState(squareStates[8]);\n\n  const restartButton = () => {\n    resetCurrentPlayerState();\n    resetSquare1();\n    resetSquare2();\n    resetSquare3();\n    resetSquare4();\n    resetSquare5();\n    resetSquare6();\n    resetSquare7();\n    resetSquare8();\n    resetSquare9();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, rows, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, gameEndSelectorState ? 'game over' : null), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"grey-button smaller-button\",\n    type: \"button\",\n    onClick: restartButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Restart\"));\n};\n\nconst Row = props => {\n  const {\n    rowIndex\n  } = props;\n  let boxes = Array(boardSize).fill(null).map((elem, i) => {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: 'box-' + i,\n      rowIndex: rowIndex,\n      boxIndex: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 12\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, boxes);\n};\n\nconst Box = props => {\n  const {\n    rowIndex,\n    boxIndex\n  } = props;\n  const [squareState, setSquareState] = useRecoilState(squareStates[rowIndex * boardSize + boxIndex]);\n  const [currentPlayer, setCurrentPlayerState] = useRecoilState(currentPlayerState);\n  const gameEndSelectorState = useRecoilValue(gameEndSelector);\n  return (\n    /*#__PURE__*/\n    // <div className={props.isWinBox ? \"box box-win\" : \"box\"} onClick={() => props.boardUpdate(props.rowIndex, props.boxIndex)}>\n    React.createElement(\"div\", {\n      className: props.isWinBox ? \"playground-box playground-box-win\" : \"playground-box\",\n      onClick: () => {\n        if (!gameEndSelectorState && squareState === '-') {\n          setSquareState(currentPlayer);\n          if (currentPlayer === 'X') setCurrentPlayerState('O');else setCurrentPlayerState('X');\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }, squareState)\n  );\n};","map":{"version":3,"sources":["/home/davide/Desktop/Recoilize-landing-page/src/Components/Playground/TicTacToe.tsx"],"names":["React","Component","useRecoilState","useRecoilValue","useResetRecoilState","squareStates","currentPlayerState","gameEndSelector","boardSize","App","render","Board","props","gameEndSelectorState","rows","Array","fill","map","el","i","resetCurrentPlayerState","resetSquare1","resetSquare2","resetSquare3","resetSquare4","resetSquare5","resetSquare6","resetSquare7","resetSquare8","resetSquare9","restartButton","Row","rowIndex","boxes","elem","Box","boxIndex","squareState","setSquareState","currentPlayer","setCurrentPlayerState","isWinBox"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport \"core-js/stable\";\nimport { RecoilRoot, Resetter, useRecoilState, useRecoilValue, useResetRecoilState } from 'recoil';\nimport { squareStates, currentPlayerState, gameEndSelector} from '../Store/Atoms';\n\nconst boardSize = 3;\n\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1>Tic Tac Toe</h1>\n        <Board />\n      </div>\n    );\n  }\n}\n\nconst Board = (props) => {\n\n  const gameEndSelectorState = useRecoilValue(gameEndSelector)\n\n  const rows = Array(boardSize).fill(null).map((el, i) => {\n    return <Row \n      key={`row-${i}`}\n      rowIndex={i}\n    />\n  })\n\n  const resetCurrentPlayerState = useResetRecoilState(currentPlayerState);\n\n  let resetSquare1 = useResetRecoilState(squareStates[0])\n  let resetSquare2 = useResetRecoilState(squareStates[1])\n  let resetSquare3 = useResetRecoilState(squareStates[2])\n  let resetSquare4 = useResetRecoilState(squareStates[3])\n  let resetSquare5 = useResetRecoilState(squareStates[4])\n  let resetSquare6 = useResetRecoilState(squareStates[5])\n  let resetSquare7 = useResetRecoilState(squareStates[6])\n  let resetSquare8 = useResetRecoilState(squareStates[7])\n  let resetSquare9 = useResetRecoilState(squareStates[8])\n  \n  const restartButton = () => {\n     resetCurrentPlayerState();\n     resetSquare1();\n     resetSquare2();\n     resetSquare3();\n     resetSquare4();\n     resetSquare5();\n     resetSquare6();\n     resetSquare7();\n     resetSquare8();\n     resetSquare9();\n     \n  }\n\n  return (\n    <div>\n      {rows}\n      <h2>\n          {gameEndSelectorState ? 'game over' : null}\n      </h2>\n      <button className=\"grey-button smaller-button\" type=\"button\" onClick={restartButton}>Restart</button>\n    </div>\n  )\n}\n\nconst Row = (props) => {\n\n  const { rowIndex } = props\n\n  let boxes = Array(boardSize).fill(null).map((elem, i) => {\n    return <Box \n      key={'box-' + i}\n      rowIndex={rowIndex} \n      boxIndex={i}\n    />\n  });\n\n  return (\n    <div>\n      {boxes}\n    </div>\n  )\n}\n\nconst Box = (props) => {\n\n  const { rowIndex, boxIndex } = props;\n  const [squareState, setSquareState] = useRecoilState(squareStates[(rowIndex * boardSize) + boxIndex]);\n  const [currentPlayer, setCurrentPlayerState] = useRecoilState(currentPlayerState);\n  const gameEndSelectorState = useRecoilValue(gameEndSelector);\n\n  return (\n    // <div className={props.isWinBox ? \"box box-win\" : \"box\"} onClick={() => props.boardUpdate(props.rowIndex, props.boxIndex)}>\n    <div className={props.isWinBox ? \"playground-box playground-box-win\" : \"playground-box\"} onClick={() => {\n      if (!gameEndSelectorState && squareState === '-') {\n        setSquareState(currentPlayer)\n        if (currentPlayer === 'X')\n          setCurrentPlayerState('O')\n        else\n          setCurrentPlayerState('X')\n      }\n    }}>\n      {squareState}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}